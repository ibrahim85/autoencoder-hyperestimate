syntax_version: "7"
project_name: hyperestimate
# docker_image: matthieudelaro/caffe-iuf-modif
# docker_image: matthieudelaro/work-on-caffe
docker_image: matthieudelaro/caffe-iuf-python
container_working_directory: /opt/caffe
enable_nvidia_devices: true
environment:
  NUT_enable_nvidia_devices: true
volumes:
  main:
    host_path: ./src
    container_path: /src
  # caffe:
  # # - ./caffeBVLC
  # # - ./caffeBVLCplus # BVLC plus
  # - ./caffe # BVLC plus plus (plus, but updated)
  # # - ./caffeOld
  # - /opt/caffe
  dataset: # if you store your datasets in another folder, add them this way
    host_path: ./dataset
    # host_path: ./datasetTest
    container_path: /dataset
  time:
    host_path: /etc/localtime
    container_path: /etc/localtime
    options: ro
macros:
  # one-training-process2:
  #   usage: runs the whole training, with all pretraining
  #   container_working_directory: /src
  #   actions:
  #   # - caffe train --solver=prototxt/modif_solver3.prototxt
  #   # After 500 iterations:
  #   #   accurLayerWinnerTop1 = 0.0104688
  #   #   accurLayerWinnerTop5 = 0.0505469
  #   #   prob = 4.60517 (* 1 = 4.60517 loss)
  #   - caffe train --solver=prototxt/modif_solver4.prototxt --weights=snapshots/modif_pretraining_3_iter_500.caffemodel
  # one-training-process:
  #   usage: runs the whole training, with all pretraining
  #   container_working_directory: /src
  #   actions:
  #   # PHASE 1: pretrain on classification
  #     # - caffe train --solver=prototxt/modif_solver.prototxt  # ~2h on TITAN for 9000 iterations, loss ~ 0.23, accuracy ~ 0.32
  #   # - caffe train --solver=prototxt/step1_solver.prototxt  # ~2h on TITAN for 9000 iterations, loss ~ 0.23, accuracy ~ 0.32
  #     # After 2000 iterations:
  #     #   accurLayerWinnerTop1 = 0.306533
  #     #   accurLayerWinnerTop5 = 0.60144
  #     #   prob = 2.85309 (* 1 = 2.85309 loss)
  #     # After 5000 iterations:
  #     #   accurLayerWinnerTop1 = 0.307813
  #     #   accurLayerWinnerTop5 = 0.573067
  #     #   prob = 3.75538 (* 1 = 3.75538 loss)
  #     # After 16000 iterations:
  #     #   accurLayerWinnerTop1 = 0.330933
  #     #   accurLayerWinnerTop5 = 0.586293
  #     #   prob = 5.89284 (* 1 = 5.89284 loss)
  #     # - caffe train --solver=prototxt/step2_solver.prototxt --weights=snapshots/modif_pretraining_bvlcplusplus_iter_2000.caffemodel
  #   # - caffe train --solver=prototxt/step2_solver.prototxt --weights=snapshots/step1_iter_2000.caffemodel
  #     # After 2000 iterations:
  #     #   accurLayerWinnerTop1 = 0.344347
  #     #   accurLayerWinnerTop5 = 0.622693
  #     #   prob = 3.08193 (* 1 = 3.08193 loss)
  #   # - caffe train --solver=prototxt/step3_solver.prototxt --weights=snapshots/step2_iter_2000.caffemodel
  #   - caffe train --solver=prototxt/step4_solver.prototxt --weights=snapshots/step3_iter_2000.caffemodel
  hyp:
    usage: run simple tests
    container_working_directory: /src
    actions:
    - ipython main.py
  # hyp-gpu:
  #   usage: run simple tests
  #   container_working_directory: /src
  #   enable_nvidia_devices: true
  #   environment:
  #     NUT_enable_nvidia_devices: true
  #   actions:
  #   - ipython main.py
  autocomplete:
    usage: access autocompletion of caffe in ipython
    container_working_directory: /src
    actions:
    - ipython -i importCaffe.py
  download:
    usage: download caffe
    container_working_directory: /opt/
    actions:
    - git clone https://github.com/matthieudelaro/caffeBVLCplus.git caffe
    - cd caffe
    - cp Makefile.config.example Makefile.config
  download-old:
    usage: download caffe
    container_working_directory: /opt/
    actions:
    - git clone https://github.com/matthieudelaro/caffe.git caffe
    - cd caffe
    - cp Makefile.config.example Makefile.config
  build:
    usage: build the project
    actions:
    - make all -j8
    - echo "/opt/caffe/.build_release/lib/" >> /etc/ld.so.conf.d/caffe-ld-so.conf
    - ldconfig
  build-cpu:
    usage: build the project in CPU mode only (set CPU_ONLY from Makefile.config on the fly)
    actions:
    - make all -j8
    - echo "/opt/caffe/.build_release/lib/" >> /etc/ld.so.conf.d/caffe-ld-so.conf
    - ldconfig
  build-gpu:
    usage: build the project in GPU mode (unset CPU_ONLY from Makefile.config on the fly)
    actions:
    - sed -i 's/CPU_ONLY := 1/# CPU_ONLY := 1/' Makefile.config
    # - sed -i 's/# USE_CUDNN := 1/USE_CUDNN := 1/' Makefile.config
    - make all -j8
    - echo "/opt/caffe/.build_release/lib/" >> /etc/ld.so.conf.d/caffe-ld-so.conf
    - ldconfig
  build-pycaffe:
    usage: build pycaffe
    actions:
    - make pycaffe -j8
  test-cpu:
    usage: run the tests in CPU mode only (set CPU_ONLY from Makefile.config on the fly)
    actions:
    - sed -i 's/# CPU_ONLY := 1/CPU_ONLY := 1/' Makefile.config
    - make runtest -j8
  test-gpu:
    usage: run the tests in GPU mode (unset CPU_ONLY from Makefile.config on the fly)
    enable_nvidia_devices: true
    actions:
    - sed -i 's/CPU_ONLY := 1/# CPU_ONLY := 1/' Makefile.config
    # - sed -i 's/# USE_CUDNN := 1/USE_CUDNN := 1/' Makefile.config
    - make runtest -j8
  train-mnist-cpu:
    usage: attemps to train MNIST in CPU mode only (solver_mode in examples/mnist/lenet_solver.prototxt on the fly)
    actions:
    - "sed -i 's/solver_mode: GPU/solver_mode: CPU/' examples/mnist/lenet_solver.prototxt"
    - ./data/mnist/get_mnist.sh
    - ./examples/mnist/create_mnist.sh
    - caffe train --solver=examples/mnist/lenet_solver.prototxt
  train-mnist-gpu:
    usage: attemps to train MNIST in GPU mode (solver_mode in examples/mnist/lenet_solver.prototxt on the fly)
    enable_nvidia_devices: true
    actions:
    - "sed -i 's/solver_mode: CPU/solver_mode: GPU/' examples/mnist/lenet_solver.prototxt"
    - ./data/mnist/get_mnist.sh
    - ./examples/mnist/create_mnist.sh
    - caffe train --solver=examples/mnist/lenet_solver.prototxt

